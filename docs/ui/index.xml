<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UI on Godot Recipes</title>
    <link>https://kidscancode.org/godot_recipes/ui/</link>
    <description>Recent content in UI on Godot Recipes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:23:50 -0700</lastBuildDate><atom:link href="https://kidscancode.org/godot_recipes/ui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Labels</title>
      <link>https://kidscancode.org/godot_recipes/ui/labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/labels/</guid>
      <description>Problem You want to display some text on the screen.
Solution Sooner or later you&amp;rsquo;re going to need to display some text on your screen. Examples include a title, countdown timer, score counter, and many others. For the majority of these, Godot&amp;rsquo;s Label node is the answer.
Working with fonts Before you can start, you&amp;rsquo;re going to need a font. We&amp;rsquo;ll go into the full details of Godot&amp;rsquo;s font support in a separate recipe, but for our purposes, let&amp;rsquo;s assume you have a TTF or OTF font file.</description>
    </item>
    
    <item>
      <title>Containers</title>
      <link>https://kidscancode.org/godot_recipes/ui/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/containers/</guid>
      <description>Problem Your UI has problem(s): it&amp;rsquo;s become overcomplicated, it doesn&amp;rsquo;t resize well, and/or you can&amp;rsquo;t keep track of how everything fits together.
Solution For many developers, building a UI is their least favorite part. It&amp;rsquo;s very easy for a complex UI to spiral out of control and become impossibly painful to fix or modify. Godot provides some great tools for building UI - and if you take the time to learn to use them, you&amp;rsquo;ll find that they take away a lot of that pain.</description>
    </item>
    
    <item>
      <title>Cooldown Button</title>
      <link>https://kidscancode.org/godot_recipes/ui/cooldown_button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/cooldown_button/</guid>
      <description>Problem You want to make RPG-style ability buttons, including a cooldown effect.
Solution If you need art for your buttons, you can find a wide variety of well-designed buttons at Game-icons.net. We&amp;rsquo;ll be using a few from there for this recipe.
Node setup The scene for our ability button will need the following nodes:
AbilityButton:  TextureButton Sweep:  TextureProgress  Timer Counter:  MarginContainer Value:  Label Drop your chosen icon into the Texture property of the AbilityButton.</description>
    </item>
    
    <item>
      <title>Heart Containers: 3 Ways</title>
      <link>https://kidscancode.org/godot_recipes/ui/heart_containers_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/heart_containers_3/</guid>
      <description>Problem You need to display a heart container bar (or other icon-based bar).
Solution A common way of displaying the player&amp;rsquo;s health is via a series of icons (typically hearts) that disappear as the player takes damage.
In this recipe, we&amp;rsquo;re going to explore three ways of displaying this information, which I&amp;rsquo;m labeling &amp;ldquo;simple&amp;rdquo;, &amp;ldquo;empty&amp;rdquo;, and &amp;ldquo;partial&amp;rdquo;:
This image shows what the bar displays when the player has 3 health.</description>
    </item>
    
    <item>
      <title>Displaying debug data</title>
      <link>https://kidscancode.org/godot_recipes/ui/debug_overlay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/debug_overlay/</guid>
      <description>Problem You need an easy way to display debug data on-screen.
Solution We&amp;rsquo;ll create an overlay that any node can register a property with, and that property will be displayed in an appropriate format.
Here&amp;rsquo;s an example of what we&amp;rsquo;re going for:
Start by adding a MarginContainer named DebugStats with a VBoxContainer child. Set the margins to a comfortable value (I usually use 20).
Let&amp;rsquo;s take a look at the code:</description>
    </item>
    
    <item>
      <title>Object Healthbars</title>
      <link>https://kidscancode.org/godot_recipes/ui/unit_healthbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/unit_healthbar/</guid>
      <description>Problem You want units in your game to have healthbars that follow them as they move.
Solution Displaying the bar can be done with a TextureProgress node. This is like the ProgressBar node, but allows the use of textures for the bar itself. The length of the bar will indicate the health value, but we can also change the texture color. We&amp;rsquo;ll use three colored bars for this:
So that this bar can be added to any unit in the game, we&amp;rsquo;ll make it a separate scene.</description>
    </item>
    
    <item>
      <title>Floating combat text</title>
      <link>https://kidscancode.org/godot_recipes/ui/floating_text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/floating_text/</guid>
      <description>Problem You want units to display damage as floating numbers when hit.
Solution There are many ways to approach this problem. For example, you could use a bitmap font and build an image for each number out of its digits, then use a Sprite node to display and move it.
However, for this recipe, we&amp;rsquo;ll use a Label node (named &amp;ldquo;FCT&amp;rdquo;). This will give us the flexibility to change the font, as well as making it easy to display the number as a string - or even other messages such as &amp;ldquo;miss&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Level Select Menu</title>
      <link>https://kidscancode.org/godot_recipes/ui/level_select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/level_select/</guid>
      <description>Problem Your game needs a &amp;ldquo;level select&amp;rdquo; menu, where the user can choose from a grid of options.
Solution As shown in the example above, we&amp;rsquo;ll make a scrolling grid of level &amp;ldquo;boxes&amp;rdquo; that the player can choose from. Let&amp;rsquo;s start with the individual level boxes:
1: Level box Here&amp;rsquo;s the node setup:
LevelBox:  PanelContainer  Label  MarginContainer  TextureRect The  TextureRect is for displaying the lock icon, and the  Label for displaying the level number.</description>
    </item>
    
    <item>
      <title>Minimap/radar</title>
      <link>https://kidscancode.org/godot_recipes/ui/minimap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/minimap/</guid>
      <description>Problem You want a minimap or radar-style UI item showing the locations of objects outside of the player&amp;rsquo;s view.
Solution Here&amp;rsquo;s an example of what we are going for: 
Project setup To illustrate this feature, we&amp;rsquo;ll start with a simplified top-down game using the Autotile recipe and a player based on the Top-down character recipe. See the linked recipes for details on how these parts work.
 div.notices.note p:first-child:after { content: &#39;Note&#39;!</description>
    </item>
    
    <item>
      <title>Radial Popup Menu</title>
      <link>https://kidscancode.org/godot_recipes/ui/radial_menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/ui/radial_menu/</guid>
      <description>Problem You want a radial menu - a ring of buttons that pops up for you to choose an option.
Solution Radial menus are used in a variety of games to allow access to a selection of buttons. For example, clicking on an NPC in a game allows you to choose what action to take: talk, inspect, attack, etc.
The specific look-and-feel of your menu should match with your game&amp;rsquo;s esthetic.</description>
    </item>
    
  </channel>
</rss>
