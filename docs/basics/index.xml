<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on Godot Recipes</title>
    <link>https://kidscancode.org/godot_recipes/basics/</link>
    <description>Recent content in Basics on Godot Recipes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 19:48:00 -0700</lastBuildDate><atom:link href="https://kidscancode.org/godot_recipes/basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding tree order</title>
      <link>https://kidscancode.org/godot_recipes/basics/tree_ready_order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/tree_ready_order/</guid>
      <description>Problem You need to understand in what order Godot handles nodes in the scene tree.
Solution &amp;ldquo;Tree order&amp;rdquo; is mentioned often in the Godot docs and in tutorials. However, it is not always obvious to a beginner what is meant by this. Generally speaking, the order in which nodes are handled in the tree is in top-down fashion, starting at the root and going down each branch in turn.
Scene tree order is something that can cause a great deal of confusion for Godot beginners.</description>
    </item>
    
    <item>
      <title>Node communication (the right way)</title>
      <link>https://kidscancode.org/godot_recipes/basics/node_communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/node_communication/</guid>
      <description>div.notices.info p:first-child:after { content: &#39;Info&#39;!important; }  Many thanks to @TheDuriel on the Godot Discord for the original diagram that inspired this article. Save this and keep it handy.
 Problem Your project has started getting complex. You have multiple scenes, instances, and a lot of nodes. You&amp;rsquo;ve probably found yourself writing code like the following:
get_node(&amp;#34;../../SomeNode/SomeOtherNode&amp;#34;) get_parent().get_parent().get_node(&amp;#34;SomeNode&amp;#34;) get_tree().get_root().get_node(&amp;#34;SomeNode/SomeOtherNode&amp;#34;) If you do this, you&amp;rsquo;ll soon find that node references like this break easily.</description>
    </item>
    
    <item>
      <title>Understanding node paths</title>
      <link>https://kidscancode.org/godot_recipes/basics/getting_nodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/getting_nodes/</guid>
      <description>Problem It&amp;rsquo;s probably the most common problem seen in the Godot help channels: an invalid node reference. Most often, it appears as the following error message:
 Invalid get index &amp;lsquo;position&amp;rsquo; (on base: &amp;lsquo;null instance&amp;rsquo;).
 Solution It&amp;rsquo;s that last part, the &amp;ldquo;null instance&amp;rdquo;, that&amp;rsquo;s the source of this problem, and the main source of confusion for Godot beginners.
The way to avoid this problem is to understand the concept of node paths.</description>
    </item>
    
    <item>
      <title>Understanding &#39;delta&#39;</title>
      <link>https://kidscancode.org/godot_recipes/basics/understanding_delta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/understanding_delta/</guid>
      <description>Problem The delta or &amp;ldquo;delta time&amp;rdquo; parameter is a frequently-misunderstood concept in game development. In this tutorial, we&amp;rsquo;ll explain how it&amp;rsquo;s used, the importance of frame-rate independent movement, and practical examples of its use in Godot.
Solution To illustrate the problem, let&amp;rsquo;s consider a Sprite node moving across the screen. If our screen is 600 pixels wide and we want the sprite to take 5 seconds to cross the screen, we can use the following calculation to find the necessary speed:</description>
    </item>
    
    <item>
      <title>Saving/loading data</title>
      <link>https://kidscancode.org/godot_recipes/basics/file_io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/file_io/</guid>
      <description>Problem You need to save and load local data between game sessions.
Solution Godot&amp;rsquo;s file I/O (input/output) system is based around the File object. You open a file by creating a new File object and calling open().
var file = File.new() file.open(&amp;#34;user://myfile.name&amp;#34;, File.READ)   div.notices.warning p:first-child:after { content: &#39;Warning&#39;!important; }  User data should only be stored in the user:// path. While res:// can be used when running from the editor, when your project is exported, the res:// path becomes read-only.</description>
    </item>
    
    <item>
      <title>Circular movement</title>
      <link>https://kidscancode.org/godot_recipes/basics/rotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/rotation/</guid>
      <description>Problem You want an object to &amp;ldquo;orbit&amp;rdquo; (move in a circle) around another object.
Solution This is a common beginner question, and often comes after a bunch of messy experimenting with trig functions. The answer is much simpler:
Place the orbiting sprite in a child node of the main sprite (we&amp;rsquo;re calling it &amp;ldquo;Pivot&amp;rdquo;). Give it an offset and rotate the Pivot.
extends Node2D export var rotation_speed = PI func _process(delta): $Sprite/Pivot.</description>
    </item>
    
    <item>
      <title>Using Custom Resources</title>
      <link>https://kidscancode.org/godot_recipes/basics/custom_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/basics/custom_resources/</guid>
      <description>Problem You&amp;rsquo;re looking for a way to handle data and/or create flexible data objects in your game.
Solution Godot&amp;rsquo;s Resource class is a powerful tool for storing and working with data. Many of the most common objects you work with in Godot extend the Resource type: animations, collision shapes, images, etc. Resources not only contain data, but can also manipulate that data (if you&amp;rsquo;re familiar with the concept of scriptable objects in Unity, the concept is similar).</description>
    </item>
    
  </channel>
</rss>
