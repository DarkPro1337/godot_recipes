<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Physics on Godot Recipes</title>
    <link>https://kidscancode.org/godot_recipes/physics/</link>
    <description>Recent content in Physics on Godot Recipes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:47:11 -0700</lastBuildDate><atom:link href="https://kidscancode.org/godot_recipes/physics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kinematic Friction</title>
      <link>https://kidscancode.org/godot_recipes/physics/kinematic_friction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/physics/kinematic_friction/</guid>
      <description>Problem You want to add friction and acceleration to your kinematic character, giving it a smoother feel.
Solution For most games, we&amp;rsquo;re not necessarily interested in a perfect physics simulation. We want action, responsiveness, and arcade feel. This is why you choose a kinematic body over a rigid one: so that you can control its behavior directly. However, some amount of physics is good - it means an object doesn&amp;rsquo;t instantly change direction or come to a stop.</description>
    </item>
    
    <item>
      <title>KinematicBody: Stopping on Slopes</title>
      <link>https://kidscancode.org/godot_recipes/physics/kinematicbody_slopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/physics/kinematicbody_slopes/</guid>
      <description>Problem Your KinematicBody slides down slopes.
Solution We&amp;rsquo;ve started with a no-frills KinematicBody, using move_and_slide(), using the script below:
extends KinematicBody export var gravity = -10.0 export var speed = 5.0 export var rot_speed = 4.0 export var jump_speed = 5.0 var velocity = Vector3.ZERO var jumping = false func get_input(delta): var input = Vector3.ZERO if Input.is_action_pressed(&amp;#34;forward&amp;#34;): input += -transform.basis.z * speed if Input.is_action_pressed(&amp;#34;back&amp;#34;): input += transform.basis.z * speed if Input.</description>
    </item>
    
    <item>
      <title>RigidBody2D: Drag and Drop</title>
      <link>https://kidscancode.org/godot_recipes/physics/rigidbody_drag_drop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/physics/rigidbody_drag_drop/</guid>
      <description>Problem You want to pick up and move rigid bodies with the mouse.
Solution Working with rigid bodies can be tricky. Godot&amp;rsquo;s physics engine controls their movements, and interfering with that can often lead to unexpected results. The key is to make use of the body&amp;rsquo;s mode property. This applies equally well in 2D or 3D.
Body setup We&amp;rsquo;ll start with our rigid body object, adding a Sprite and CollisionShape2D. You can also add a PhysicsMaterial if you want to set Bounce and Friction properties.</description>
    </item>
    
    <item>
      <title>Kinematic to Rigid Body Interaction</title>
      <link>https://kidscancode.org/godot_recipes/physics/kinematic_to_rigidbody/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/physics/kinematic_to_rigidbody/</guid>
      <description>Problem You want your kinematic character to interact with rigid bodies.
Solution  div.notices.note p:first-child:after { content: &#39;Note&#39;!important; }  This recipe applies equally well in both 2D and 3D nodes.
 By default, a kinematic body moved with move_and_slide() or move_and_collide() will push any rigid bodies it collides with. This interaction ignores the rigid body&amp;rsquo;s physics properties due to the kinematic move function&amp;rsquo;s infinite_inertia parameter.
In some cases, this might be all you need.</description>
    </item>
    
    <item>
      <title>Using 2D Joints</title>
      <link>https://kidscancode.org/godot_recipes/physics/joints_2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/physics/joints_2d/</guid>
      <description>Problem You&amp;rsquo;d like to understand Godot&amp;rsquo;s Joint2D nodes.
Solution Joint are used to constrain the movement of attached physics objects. For any joint node, you need to attach two bodies, which must extend from PhysicsObject2D.
Properties These properties are common to all joint nodes:
 Node A and Node B: The assigned physics bodies. Bias: The rate at which the joint pulls the two bodies back together if they move apart.</description>
    </item>
    
    <item>
      <title>Conveyor Belt</title>
      <link>https://kidscancode.org/godot_recipes/physics/conveyor_belt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/physics/conveyor_belt/</guid>
      <description>Problem You want to make a conveyor belt object that will move bodies (kinematic or rigid).
Solution You can make a conveyor belt object using nothing but a StaticBody2D by using its constant_linear_velocity property.
 div.notices.note p:first-child:after { content: &#39;Note&#39;!important; }  See below for how to address this in 3D.
 Here&amp;rsquo;s an example, using a StaticBody2D and a RigidBody2D. No code was added. The static body&amp;rsquo;s Constant Linear Velocity is set to (200, 0).</description>
    </item>
    
  </channel>
</rss>
