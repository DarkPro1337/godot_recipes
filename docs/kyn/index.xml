<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Know Your Nodes on Godot Recipes</title>
    <link>https://kidscancode.org/godot_recipes/kyn/</link>
    <description>Recent content in Know Your Nodes on Godot Recipes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kidscancode.org/godot_recipes/kyn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Label</title>
      <link>https://kidscancode.org/godot_recipes/kyn/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/kyn/label/</guid>
      <description>Label Label is a Control node for displaying unformatted text, with options for controlling the text&amp;rsquo;s alignment, wrapping, etc.
API Documentation
Node properties See the documentation for the full list, but here we&amp;rsquo;ll review the most commonly used properties of the node:
 text - this property is the contents of the label. Change this in code to change what the label displays. If you&amp;rsquo;re displaying numerical values, don&amp;rsquo;t forget to convert them to strings!</description>
    </item>
    
    <item>
      <title>Path2D &amp; PathFollow2D</title>
      <link>https://kidscancode.org/godot_recipes/kyn/path2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/kyn/path2d/</guid>
      <description>Path2D &amp;amp;  PathFollow2D A path is a sequence of points in 2D space, defined by a Curve2D resource. The Path2D is a node that allows you to position a path in 2D space, and do create a new path in the editor.
Paths have a variety of uses. You can make a patrol path for an enemy mob to follow, a winding path for an animated visual effect, a pattern for a moving platform to follow, etc.</description>
    </item>
    
    <item>
      <title>RayCast2D</title>
      <link>https://kidscancode.org/godot_recipes/kyn/raycast2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/kyn/raycast2d/</guid>
      <description>RayCast2D Raycasting is a common technique in game development. &amp;ldquo;Casting a ray&amp;rdquo; means extending a line from a point until it collides with something or reaches its limit.
Node properties Add a RayCast2D node and take a look at the Inspector:
Here are the main properties you&amp;rsquo;ll need to understand:
 Enabled  Turn this on to make the raycast work. This property is disabled by default!
 Exclude Parent  This property causes the ray to ignore collisions with the parent object.</description>
    </item>
    
    <item>
      <title>RigidBody2D</title>
      <link>https://kidscancode.org/godot_recipes/kyn/rigidbody2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/kyn/rigidbody2d/</guid>
      <description>RigidBody2D RigidBody2D is the physics body in Godot that provides simulated physics. This means that you don’t control a RigidBody2Ddirectly. Instead you apply forces to it (gravity, impulses, etc.) and Godot’s built-in physics engine calculates the resulting movement, including collisions, bouncing, rotating, etc.
 div.notices.warning p:first-child:after { content: &#39;Warning&#39;!important; }  Setting a RigidBody2D&amp;rsquo;s physical properties, such as position or linear_velocity directly will not work correctly. The physics engine controls these values.</description>
    </item>
    
    <item>
      <title>YSort</title>
      <link>https://kidscancode.org/godot_recipes/kyn/ysort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kidscancode.org/godot_recipes/kyn/ysort/</guid>
      <description>YSort Many 2D games use a &amp;ldquo;3/4 view&amp;rdquo; perspective, giving the impression that the camera is looking at the world at an angle. However, to make this art style work, objects that are &amp;ldquo;farther&amp;rdquo; away should be rendered behind &amp;ldquo;nearer&amp;rdquo; objects. In practice, we want to &amp;ldquo;y sort&amp;rdquo;, or make the drawing order tied to the object&amp;rsquo;s y coordinate: the higher on the screen, the farther away and therefore the lower the render order.</description>
    </item>
    
  </channel>
</rss>
